group 'com.nab'

def isJenkinsBuild = rootProject.hasProperty('buildNumber')

def jenkinsSnapShot() {
    ((['origin/master','origin/release'].contains(rootProject.getProperty('branch'))) ? rootProject.getProperty('buildNumber')
            : 'snapshot-' + rootProject.getProperty('buildNumber'))
}

version '1.0.1-' + (isJenkinsBuild ? jenkinsSnapShot() : 'local-snapshot')

buildscript {
    ext {
        artifactoryHost = System.getenv("ARTIFACTORY_HOST") ?: '10.40.250.118'
        ibCodeRulesVersion = '0.1.39'
    }

    repositories {
        mavenLocal()
        maven { url "http://$artifactoryHost/artifactory/ib301" }
        maven { url "http://$artifactoryHost/artifactory/repo" }
    }
    dependencies {
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:3.2.0")
        classpath("com.nab:ib-code-rules:$ibCodeRulesVersion") {
            artifact {
                name = 'e301.checkstyle'
                extension = 'xml'
                type = 'text'
            }
            artifact {
                name = 'e301.javaFormatter'
                extension = 'xml'
                type = 'text'
            }
            artifact {
                name = 'commitTemplate'
                extension = 'hbs'
                type = 'hbs'
            }
            artifact {
                name = 'nab-changelog'
                extension = 'js'
                type = 'js'
            }
        }
    }
}

apply plugin: 'java'
apply plugin: 'com.jfrog.artifactory'

ext {
    artifactoryHost = System.getenv("ARTIFACTORY_HOST") ?: '10.40.250.118'
}

repositories {
    mavenLocal()
    maven {
        url "http://$artifactoryHost/artifactory/ib301"
    }
    maven {
        url "http://$artifactoryHost/artifactory/repo"
    }
    mavenCentral()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.3.1.201605051710-r'
    compile 'commons-configuration:commons-configuration:1.10'
    testCompile 'junit:junit:4.12'
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    testLogging {
        events "passed", "skipped", "failed", "standardError"// , "standardOut"
        exceptionFormat = 'full'
    }
}

